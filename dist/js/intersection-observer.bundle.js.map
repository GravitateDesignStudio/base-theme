{"version":3,"sources":["webpack:///./node_modules/intersection-observer/intersection-observer.js"],"names":["window","IntersectionObserverEntry","prototype","Object","defineProperty","get","this","intersectionRatio","document","registry","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","observe","target","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","ownerDocument","_checkForIntersections","unobserve","filter","_unmonitorIntersections","length","_unregisterInstance","disconnect","_unmonitorAllIntersections","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","value","parseFloat","unit","doc","win","defaultView","_monitoringDocuments","indexOf","callback","monitoringInterval","domObserver","setInterval","addEvent","MutationObserver","attributes","childList","characterData","subtree","_monitoringUnsubscribes","clearInterval","removeEvent","root","frame","getFrameElement","index","rootDoc","itemDoc","unsubscribe","splice","unsubscribes","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","top","bottom","left","right","width","height","forEach","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","intersectionRect","_computeTargetAndRootIntersection","newEntry","time","performance","now","boundingClientRect","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","parentBoundingRect","parentIntersectionRect","parent","getParentNode","atRoot","parentRect","parentComputedStyle","frameRect","frameIntersect","body","documentElement","overflow","computeRectIntersection","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","targetArea","intersectionArea","Number","toFixed","opt_options","fn","timeout","timer","options","bind","setTimeout","rootMargin","join","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","rect1","rect2","Math","max","min","el","err","child","parentNode","host","assignedSlot","frameElement","e"],"mappings":"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","file":"intersection-observer.bundle.js","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * A local reference to the document.\n */\nvar document = window.document;\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n\n  /** @private @const {!Array<!Document>} */\n  this._monitoringDocuments = [];\n  /** @private @const {!Array<function()>} */\n  this._monitoringUnsubscribes = [];\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections(target.ownerDocument);\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n        return item.element != target;\n      });\n  this._unmonitorIntersections(target.ownerDocument);\n  if (this._observationTargets.length == 0) {\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorAllIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function(doc) {\n  var win = doc.defaultView;\n  if (!win) {\n    // Already destroyed.\n    return;\n  }\n  if (this._monitoringDocuments.indexOf(doc) != -1) {\n    // Already monitoring.\n    return;\n  }\n\n  // Private state for monitoring.\n  var callback = this._checkForIntersections;\n  var monitoringInterval = null;\n  var domObserver = null;\n\n  // If a poll interval is set, use polling instead of listening to\n  // resize and scroll events or DOM mutations.\n  if (this.POLL_INTERVAL) {\n    monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n  } else {\n    addEvent(win, 'resize', callback, true);\n    addEvent(doc, 'scroll', callback, true);\n    if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n      domObserver = new win.MutationObserver(callback);\n      domObserver.observe(doc, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    }\n  }\n\n  this._monitoringDocuments.push(doc);\n  this._monitoringUnsubscribes.push(function() {\n    // Get the window object again. When a friendly iframe is destroyed, it\n    // will be null.\n    var win = doc.defaultView;\n\n    if (win) {\n      if (monitoringInterval) {\n        win.clearInterval(monitoringInterval);\n      }\n      removeEvent(win, 'resize', callback, true);\n    }\n\n    removeEvent(doc, 'scroll', callback, true);\n    if (domObserver) {\n      domObserver.disconnect();\n    }\n  });\n\n  // Also monitor the parent.\n  if (doc != (this.root && this.root.ownerDocument || document)) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._monitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function(doc) {\n  var index = this._monitoringDocuments.indexOf(doc);\n  if (index == -1) {\n    return;\n  }\n\n  var rootDoc = (this.root && this.root.ownerDocument || document);\n\n  // Check if any dependent targets are still remaining.\n  var hasDependentTargets =\n      this._observationTargets.some(function(item) {\n        var itemDoc = item.element.ownerDocument;\n        // Target is in this context.\n        if (itemDoc == doc) {\n          return true;\n        }\n        // Target is nested in this context.\n        while (itemDoc && itemDoc != rootDoc) {\n          var frame = getFrameElement(itemDoc);\n          itemDoc = frame && frame.ownerDocument;\n          if (itemDoc == doc) {\n            return true;\n          }\n        }\n        return false;\n      });\n  if (hasDependentTargets) {\n    return;\n  }\n\n  // Unsubscribe.\n  var unsubscribe = this._monitoringUnsubscribes[index];\n  this._monitoringDocuments.splice(index, 1);\n  this._monitoringUnsubscribes.splice(index, 1);\n  unsubscribe();\n\n  // Also unmonitor the parent.\n  if (doc != rootDoc) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._unmonitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorAllIntersections = function() {\n  var unsubscribes = this._monitoringUnsubscribes.slice(0);\n  this._monitoringDocuments.length = 0;\n  this._monitoringUnsubscribes.length = 0;\n  for (var i = 0; i < unsubscribes.length; i++) {\n    unsubscribes[i]();\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} targetRect The bounding rect of the target.\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, targetRect, rootRect) {\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot && parent) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return null;\n\n    if (parent == this.root || parent.nodeType == /* DOCUMENT */ 9) {\n      atRoot = true;\n      if (parent == this.root || parent == document) {\n        parentRect = rootRect;\n      } else {\n        // Check if there's a frame that can be navigated to.\n        var frame = getParentNode(parent);\n        var frameRect = frame && getBoundingClientRect(frame);\n        var frameIntersect =\n            frame &&\n            this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n        if (frameRect && frameIntersect) {\n          parent = frame;\n          parentRect = convertFromParentRect(frameRect, frameIntersect);\n        } else {\n          parent = null;\n          intersectionRect = null;\n        }\n      }\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      var doc = parent.ownerDocument;\n      if (parent != doc.body &&\n          parent != doc.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n    }\n    if (!intersectionRect) break;\n    parent = parent && getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target) &&\n    (!this.root || this.root.ownerDocument == target.ownerDocument);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  } || null;\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n\n/**\n * Inverts the intersection and bounding rect from the parent (frame) BCR to\n * the local BCR space.\n * @param {Object} parentBoundingRect The parent's bound client rect.\n * @param {Object} parentIntersectionRect The parent's own intersection rect.\n * @return {Object} The local root bounding rect for the parent's children.\n */\nfunction convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n  var top = parentIntersectionRect.top - parentBoundingRect.top;\n  var left = parentIntersectionRect.left - parentBoundingRect.left;\n  return {\n    top: top,\n    left: left,\n    height: parentIntersectionRect.height,\n    width: parentIntersectionRect.width,\n    bottom: top + parentIntersectionRect.height,\n    right: left + parentIntersectionRect.width\n  };\n}\n\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (node.nodeType == /* DOCUMENT */ 9 && node != document) {\n    // If this node is a document node, look for the embedding frame.\n    return getFrameElement(node);\n  }\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n/**\n * Returns the embedding frame element, if any.\n * @param {!Document} doc\n * @return {!Element}\n */\nfunction getFrameElement(doc) {\n  try {\n    return doc.defaultView && doc.defaultView.frameElement || null;\n  } catch (e) {\n    // Ignore the error.\n    return null;\n  }\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n"],"sourceRoot":""}