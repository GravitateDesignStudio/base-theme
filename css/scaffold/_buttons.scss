@mixin button-state-styles($state-styles) {
	@each $prop-key, $prop-value in $state-styles {
		@if (type-of($prop-value) != 'map') {
			#{$prop-key}: #{map-get($state-styles, $prop-key)};
		}
	}
}

@mixin button-styles($styles, $include-defaults) {
	// state styles, dark bg, bg overrides
	$hover-styles: map-get($styles, 'hover');
	$active-styles: map-get($styles, 'active');
	$disabled-styles: map-get($styles, 'disabled');
	$dark-bg: map-get($styles, 'dark-bg');
	$override-bg: map-get($styles, 'override-bg');

	// default styles
	$default-properties: (
		'transition': all $default-transition-speed ease-out,
		'appearance': none,
		'cursor': pointer,
		'display': inline-flex,
		'justify-content': center,
		'align-items': center,
		'position': relative,
		'outline': none,
		// 'text-align': center,
		'text-decoration': none,
		'line-height': 1.875rem,
		'margin': 0 0 1rem,
		'border-radius': 0,
		'border': 0,
		'box-shadow': none,
		'color': '',
		'background-color': '',
		'letter-spacing': '',
		'padding': 0.5rem 1rem,
		'text-transform': uppercase,
		'min-width': 175px,
		'min-height': '',
		'font': sans-serif
	);

	// default properties
	@each $prop-key, $prop-value in $default-properties {
		@if (map-get($styles, $prop-key)) {
			#{$prop-key}: #{map-get($styles, $prop-key)};
		} @else if ($include-defaults) {
			#{$prop-key}: #{map-get($default-properties, $prop-key)};
		}
	}

	// custom properties not included in the defaults
	// ignore map values (ex: 'hover', 'active', etc...)
	@each $prop-key, $prop-value in $styles {
		@if (map-has-key($default-properties, $prop-key) == false and type-of($prop-value) != 'map') {
			#{$prop-key}: #{map-get($styles, $prop-key)};
		}
	}

	@if $hover-styles {
		&:hover,
		&:focus {
			@include button-state-styles($hover-styles);
			text-decoration: none;
		}
	}

	@if $active-styles {
		&.active,
		&:active {
			@include button-state-styles($active-styles);
			text-decoration: none;
		}
	}

	@if $disabled-styles {
		&:disabled,
		&.disabled {
			@include button-state-styles($disabled-styles);
			pointer-events: none;
			cursor: not-allowed;
		}
	}

	@if $dark-bg {
		@each $color-name in $bg-colors-with-light-text {
			@if (map-has-key($override-bg, $color-name) == false) {
				.bg-#{$color-name} &,
				.block-bg-#{$color-name} & {
					@include button-styles($dark-bg, false);
				}
			}
		}
	}

	@if $override-bg {
		@each $color-name, $color-styles in $override-bg {
			.bg-#{$color-name} &,
			.block-bg-#{$color-name} & {
				@include button-styles($color-styles, false);
			}
		}
	}
}

.button,
button,
input[type=submit],
.mce-button-primary {
	@include button-styles($button-default, true);

	@each $variation-name, $variation-styles in $button-variations {
		&.button--#{$variation-name} {
			@include button-styles($variation-styles, false);
		}
	}

	html.browser-ie & {
		padding-top: 1rem;
	}
}
